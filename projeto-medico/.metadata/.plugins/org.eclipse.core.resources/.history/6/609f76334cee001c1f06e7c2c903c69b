package com.hospital.medico.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.hospital.medico.entities.Medico;
import com.hospital.medico.repository.IMedicoRepository;
import com.hospital.medico.request.MedicoGetResponse;
import com.hospital.medico.request.MedicoPostRequest;
import com.hospital.medico.request.MedicoPutRequest;

import io.swagger.annotations.ApiOperation;

@Controller
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class MedicoController {

	@Autowired
	private IMedicoRepository repository;

	private static final String ENDPOINT = "api/medico";
	

	@ApiOperation("Servico para Cadastro de Medicos")//Swagger
	@RequestMapping(value = ENDPOINT, method = RequestMethod.POST)

	public ResponseEntity<String> post(@RequestBody MedicoPostRequest request) { // post envia dados
		try {
			Medico medico = new Medico();
			
			
			medico.setNome(request.getNome());
			medico.setCrm(request.getCrm());
			medico.setTelefone(request.getTelefone());
			medico.setTipo(request.getTipo());

			repository.save(medico);

			return ResponseEntity.status(HttpStatus.OK).body("Medico cadastrado com sucesso");

		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro" + e.getMessage());
		}
	}

	@ApiOperation("Serviço de atualização de dados")
	@RequestMapping(value = ENDPOINT, method = RequestMethod.PUT)
	
	public ResponseEntity<String> put(@RequestBody MedicoPutRequest request) {
		try {
			Optional<Medico> id = repository.findById(request.getIdMedico());
		if (id.isEmpty()) {
			return ResponseEntity
					.status(HttpStatus.BAD_REQUEST)
					.body("Medico não encontrado no resgistro, por favor verifique");
			
		}else {
			Medico medico = id.get();
			medico.setNome(request.getNome());
			medico.setCrm(request.getCrm());
			medico.setTelefone(request.getTelefone());
			medico.setTipo(request.getTipo());
			repository.save(medico);
			
			return ResponseEntity.status(HttpStatus.OK).body("Medico atualizado com sucesso.");
		}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro:" + e.getMessage());
		}
		
	}
	

	@ApiOperation("Serviço de deleção de dados") 
	@RequestMapping(value = ENDPOINT+ "/{idMedico}", method = RequestMethod.DELETE)
	
	public ResponseEntity<String> delete(@PathVariable("idMedico")Integer idMedico) { 
		try {
			Optional<Medico> item = repository.findById(idMedico);
			if (item.isEmpty()) {
				return ResponseEntity
						.status(HttpStatus.BAD_REQUEST)
						.body("Medico não encontrado, por favor verifique");
			}else {
				Medico medico = item.get();
				repository.delete(medico);
				return ResponseEntity
						.status(HttpStatus.OK)
						.body("Registro excluido com sucesso.");
				
			}
			
		} catch (Exception e) {
			return ResponseEntity
					.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error:"+ e.getMessage());
		}
				
	}


	@RequestMapping(value = ENDPOINT, method = RequestMethod.GET)
	@ApiOperation("Serviço de busca de dados")
	
	public ResponseEntity<List<MedicoGetResponse>> get() { 

		List<MedicoGetResponse> response = new ArrayList<MedicoGetResponse>();
		
		for(Medico medico : repository.findAll()) {
			
			MedicoGetResponse itemMedico = new MedicoGetResponse();
			
			itemMedico.setIdMedico(medico.getIdMedico());
			itemMedico.setNome(medico.getNome());
			itemMedico.setCrm(medico.getCrm());
			itemMedico.setTelefone(medico.getTelefone());
			itemMedico.setTipo(medico.getTipo());
	
			response.add(itemMedico);
			
		}
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	

    @ApiOperation("Serviço de consulta dos Medicos") 
    @RequestMapping(value = ENDPOINT + "/{idmedico}", method = RequestMethod.GET)
  
    public ResponseEntity<MedicoGetResponse> getId(@PathVariable("idmedico") Integer idmedico) { 
        Optional<Medico> item = repository.findById(idmedico); 

        if (item.isEmpty()) { 
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        } else {
            MedicoGetResponse response = new MedicoGetResponse();

            Medico medico = item.get();

            response.setIdMedico(medico.getIdMedico());
            response.setNome(medico.getNome());
            response.setCrm(medico.getCrm());
            response.setTelefone(medico.getTelefone());
            response.setTipo(medico.getTipo());


            return ResponseEntity.status(HttpStatus.OK).body(response);
        }

    }
	

}